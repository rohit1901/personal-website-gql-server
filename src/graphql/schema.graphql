scalar GQLDate

type Basics {
    name: String
    label: String
    image: String
    email: String
    phone: String
    url: String
    summary: String
    location: Location
    profiles: [Profile]
}

type Location {
    address: String
    postalCode: String
    city: String
    countryCode: String
    region: String
}

type Profile {
    network: String
    username: String
    url: String
}

type Work {
    name: String
    position: String
    url: String
    image: String
    startDate: String
    endDate: String
    summary: String
    highlights: [String]
    location: String
    description: String
}

type Volunteer {
    organization: String
    position: String
    url: String
    startDate: String
    endDate: String
    summary: String
    highlights: [String]
}

type Education {
    institution: String
    url: String
    area: String
    studyType: String
    startDate: String
    endDate: String
    score: String
    courses: [String]
}

type Award {
    title: String
    date: String
    awarder: String
    summary: String
}

type Certificate {
    name: String
    date: String
    issuer: String
    url: String
}

type Publication {
    name: String
    publisher: String
    releaseDate: String
    url: String
    summary: String
}

type Skill {
    name: String
    level: String
    keywords: [String]
}

type Language {
    language: String
    fluency: String
}

type Interest {
    name: String
    keywords: [String]
}

type Reference {
    name: String
    reference: String
}

type Project {
    name: String
    startDate: String
    endDate: String
    description: String
    highlights: [String]
    url: String
}

type ReadingState {
    status: ReadingStatus!
    book: Book!
}

enum ReadingStatus {
    WANTS_TO_READ
    IS_READING
    FINISHED
    DROPPED
    NONE
}
type Author {
    name: String!
}
type Book {
    id: ID!
    slug: String!
    title: String!
    description: String
    cover: String!
    authors: [Author!]
}

type UserLoginResponse {
    token: String!
    email: String!
    languages: [String!]!
    profile: UserProfile!
}

type UserProfile {
    id: ID!
    handle: String!
    name: String!
    bio: String!
    image: String!
}


type AppTokenResponse {
    token: String!
    createdOn: GQLDate!
    expiresOn: GQLDate!
}

type GitHubRepo {
    description: String
    icon: String
    image: String
    title: String
    url: String
    login: String
    avatar_url: String
    html_url: String
}

type GitHubOwner {
    login: String
    avatar_url: String
    html_url: String
}

type Mutation {
    login(email: String!, password: String!): UserLoginResponse!
}

type Query {
    basics: Basics
    work: [Work]
    volunteer: [Volunteer]
    education: [Education]
    awards: [Award]
    certificates: [Certificate]
    publications: [Publication]
    skills: [Skill]
    languages: [Language]
    interests: [Interest]
    references: [Reference]
    projects: [Project]
    gitHubRepos: [GitHubRepo]
    getReadingStates: [ReadingState!]!
    getLiteralToken: AppTokenResponse
}
